package com.designer.gwt.client;

import java.util.logging.Level;
import java.util.logging.Logger;

import com.designer.gwt.client.PopupBase.PopupBaseHost;
import com.google.gwt.core.client.GWT;
import com.google.gwt.core.client.Scheduler;
import com.google.gwt.core.client.Scheduler.ScheduledCommand;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.resources.client.CssResource;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Anchor;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.DecoratedTabPanel;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.PopupPanel;
import com.google.gwt.user.client.ui.ScrollPanel;
import com.google.gwt.user.client.ui.SplitLayoutPanel;
import com.google.gwt.user.client.ui.Tree;
import com.google.gwt.user.client.ui.TreeItem;
import com.google.gwt.user.client.ui.Widget;

public class Designertest extends Composite implements  PopupBaseHost {
	private LoginInfo loginInfo;
	private PopupPanel popup;
	private int count = 0;
	private Logger logger = Logger.getLogger(Designertest.class.getSimpleName());
	private final EnvironmentServiceAsync environmentService = GWT.create(EnvironmentService.class);

	private static DesignertestUiBinder uiBinder = GWT
			.create(DesignertestUiBinder.class);
	
	@UiField
	Anchor signOut;
	
	@UiField
	Label greeting;
	
	@UiField
	SplitLayoutPanel mainPanel;
	
	@UiField
	HTMLPanel tabPanel1;
	
	@UiField
	HTMLPanel center;

//	@UiField
	ScrollPanel treeContainer;
	
	@UiField
	Button button;
	
	@UiField
	Button buttonLast;
	
	@UiField
	HTMLPanel envContainer;
	
	@UiField
	DecoratedTabPanel eastPanel;
	
	@UiField
	MyStyle style;

	interface DesignertestUiBinder extends UiBinder<Widget, Designertest> {
	}

	
	@Override
	protected void onLoad() {
		 Scheduler.get().scheduleDeferred(new ScheduledCommand() {
			    @Override
			    public void execute() {
			    	int h = center.getElement().getOffsetHeight();
					int w = center.getElement().getOffsetWidth();
										
					logger.log(Level.INFO, "Width is " + w + " and Height is " + h );
					
					treeContainer = new ScrollPanel();
					treeContainer.setWidth(String.valueOf(w)+"px");
					treeContainer.setHeight(String.valueOf(h)+"px");
					treeContainer.getElement().getStyle().setProperty("backgroundColor", "#FFC");
					
					center.add(treeContainer);
					
					populateTree(treeContainer);	
			  }
		 });	
	}

	public Designertest(LoginInfo loginInfo) {
		initWidget(uiBinder.createAndBindUi(this));
		this.loginInfo = loginInfo;
		greeting.setText("Hello " + loginInfo.getNickname());
		signOut.setHref(loginInfo.getLoginUrl());
		eastPanel.selectTab(0);
		buttonLast.addClickHandler(new ClickHandler() {

			@Override
			public void onClick(ClickEvent event) {
				EnvironmentTreeItem b = new EnvironmentTreeItem(true, true);
				b.setName("Space " + count++);
				envContainer.add(b);
				
			}
		});
	}
	
	
	
	private void populateTree(ScrollPanel panel) {
		Tree t = new Tree();
		
		EnvironmentTreeItem b = new EnvironmentTreeItem(true, true);
		
		b.setName("Tree");

		TreeItem root = new TreeItem(b);
		t.addItem(root);
		panel.add(t);
		
	}

	@UiHandler("button")
	void onButtonClick(ClickEvent event) {
		popup = new PopupPanel();

		int width = (Window.getClientWidth() / 2);
		popup.setWidth(width + "px");

		int height = (Window.getClientHeight() / 2);
		popup.setHeight(height + "px");

		popup.setGlassEnabled(true);
		popup.setWidget(new PopupBase(this));
		popup.center();
		
		

	}
	
	public void removePopUp() {
		
	}
	
	  interface MyStyle extends CssResource {
		    String header();
		    String treeNode();
		  }


	@Override
	public void closePopupBase() {
		popup.removeFromParent();
	}
}
